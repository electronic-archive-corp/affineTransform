// Generated by CoffeeScript 1.6.3
(function() {
  var AffineTransformer, Matrix;

  Matrix = require("./matrixTransform").Matrix;

  AffineTransformer = (function() {
    function AffineTransformer() {}

    AffineTransformer.prototype.M = null;

    AffineTransformer.prototype.e = null;

    AffineTransformer.prototype.isValidArray = function(arr) {
      var ai, i;
      if (arr && Array.isArray(arr) && arr.length === 3) {
        i = 0;
        while (i < arr.length) {
          ai = arr[i];
          if (typeof ai.x !== "number") {
            return false;
          }
          if (typeof ai.y !== "number") {
            return false;
          }
          i++;
        }
        return this.isAllPointsDifferent(arr) && !this.isOnSameLine(arr);
      }
      return false;
    };

    AffineTransformer.prototype.isOnSameLine = function(arr) {
      var a, b, c, d, y;
      a = arr[0];
      b = arr[1];
      c = arr[2];
      if (c.x === b.x) {
        d = a;
        a = b;
        b = c;
        c = d;
      }
      if (c.x === b.x) {
        return true;
      }
      y = b.y + (c.y - b.y) * (a.x - b.x) / (c.x - b.x);
      return y === a.y;
    };

    AffineTransformer.prototype.isAllPointsDifferent = function(arr) {
      var i, ii, j, jj, _i, _j, _len, _len1, _ref, _ref1;
      _ref = arr.length;
      for (ii = _i = 0, _len = _ref.length; _i < _len; ii = ++_i) {
        i = _ref[ii];
        _ref1 = arr.length;
        for (jj = _j = 0, _len1 = _ref1.length; _j < _len1; jj = ++_j) {
          j = _ref1[jj];
          if (ii === jj) {
            continue;
          }
          if (i.x === j.x && i.y === j.y) {
            return false;
          }
        }
      }
      return true;
    };

    AffineTransformer.prototype.findMatrix = function(arr) {
      var a1, a2, a3, b1, b2, b3, n, o, rp, x1, x2, x3, y1, y2, y3;
      if (!this.isValidArray(arr)) {
        console.log("ERROR: INVALID ARRAY OF POINTS");
        throw new Error("Invalid array of points");
      }
      x1 = arr[0].x;
      x2 = arr[1].x;
      x3 = arr[2].x;
      y1 = arr[0].y;
      y2 = arr[1].y;
      y3 = arr[2].y;
      a1 = arr[0].x2;
      a2 = arr[1].x2;
      a3 = arr[2].x2;
      b1 = arr[0].y2;
      b2 = arr[1].y2;
      b3 = arr[2].y2;
      o = new Matrix([x2 - x1, x3 - x1, y2 - y1, y3 - y1]);
      n = new Matrix([a2 - a1, a3 - a1, b2 - b1, b3 - b1]);
      this.M = n.multiply(o.inverse());
      console.log(this.M.getRow(1));
      console.log(this.M.getRow(2));
      rp = this.M.multiply(new Matrix([[x1], [y1]]));
      this.e = new Matrix([[a1], [b1]]).subtract(rp);
      console.log(this.e.getRow(1));
      return console.log(this.e.getRow(2));
    };

    AffineTransformer.prototype.getPoint = function(x, y) {
      var r;
      r = this.e.add(this.M.multiply(new Matrix([[x], [y]])));
      return {
        a: r.getRow(1)[0],
        b: r.getRow(2)[0]
      };
    };

    AffineTransformer.prototype.getMatrix = function() {
      return this.M;
    };

    AffineTransformer.prototype.setMatrix = function(m) {
      return this.M = m;
    };

    AffineTransformer.prototype.getDifferencePart = function() {
      return this.e;
    };

    AffineTransformer.prototype.setDifferencePart = function(e) {
      return this.e = e;
    };

    return AffineTransformer;

  })();

  module.exports = AffineTransformer;

}).call(this);

/*
//@ sourceMappingURL=app.map
*/
